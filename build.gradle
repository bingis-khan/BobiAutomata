/*
 * This file was generated by the Gradle 'init' task. NOT ANYMORE.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

plugins {
    id 'application'
    id 'edu.sc.seis.launch4j' version '2.5.0'	// createExe
    id 'org.beryx.runtime' version '1.12.5'		// runtime (and making those images). Very cool.
}

application {
	mainClass = 'com.bingis_khan.bobicell.BobiAutomata'
}

jar {
	// Left just-in-case.
	manifest {
		attributes('Main-Class': 'com.bingis_khan.bobicell.BobiAutomata')
	}
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    
    // JUnit test engine
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

run {
	enableAssertions = true
}

test {
	useJUnitPlatform()
}

createExe {
	mainClassName = 'com.bingis_khan.bobicell.BobiAutomata'
	outfile = 'bobicell'	// Exact name TBD.
	bundledJrePath = 'jre'	// (directory name)
	headerType = 'console'	// Yeah, uhh... It's a Parser + GUI, so it's kind of a hybrid.
							// Actually, I set it, because it makes std-whatever visible on console.
}

runtime {
	// I left it in in case I wanted to run it on something like a Raspberry Pi. 
	// Stored in build/image.
	options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
}

tasks.register('executable', Copy) {
	dependsOn 'createExe', 'jre'

	def dest = 'build/bobicell'
	
	
	// Bundle JRE.
	from ('build/jre') {
		into 'jre'	// Otherwise, it copies *the contents* of the folder and NOT the folder itself.
	}
	
	// Bundle sample automata.
	from ('automata') {
		into 'automata'	// Reason described above.
	}
	
	// Bundle the JAR in .exe's clothing.
	from 'build/launch4j'	// Copy only the executable inside.
	
	into dest
}